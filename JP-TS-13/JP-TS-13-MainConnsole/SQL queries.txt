https://github.com/nikachkharti/JP-TS-13



--CREATE DATABASE JPTS13
--USE JPTS13


--string ტექსტური

--CHAR -- არ აღიქვამს ქართულ სიმბოლოებს, არ არის ოპტიმალური
--NCHAR -- აღიქვამს ქართულ სიმბოლოებს, არ არის ოპტიმალური
--VARCHAR -- არ აღიქვამს ქართულ სიმბოლოებს, არის ოპტიმალური
--NVARCHAR -- აღიქვამს ქართულ სიმბოლოებს, არის ოპტიმალური


--byte int long - მთელი რიცხვები

--BIT
--TINYINT
--SMALLINT
--INT
--BIGINT

--float double decimal ათწილადი

--REAL
--FLOAT
--DOUBLE
--SMALLMONEY
--MONEY

--bool true false
--BIT


--DateTime

--DATE
--TIME
--DATETIME
--DATETIME2

CREATE TABLE Students
(
	FirstName NVARCHAR(50) NOT NULL,
	LastName NVARCHAR(50) NOT NULL,
	Age INT NOT NULL,
	Score FLOAT NOT NULL,
	BirthDate DATE NOT NULL,
	Attends BIT NOT NULL
)

--ALTER TABLE Students
--ALTER COLUMN FirstName NVARCHAR NOT NULL
--ALTER COLUMN LastName NVARCHAR NOT NULL
--ALTER COLUMN Age INT NOT NULL
--ALTER COLUMN Score FLOAT NOT NULL
--ALTER COLUMN BirthDate DATE NOT NULL
--ALTER COLUMN Attends BIT NOT NULL




INSERT INTO Students(FirstName,LastName,Age,Score,BirthDate,Attends)
VALUES
--('ირაკლი','ბერძენიშვილი',16,8.2,'2000-12-12',1)
--(N'ლუკა',N'გაჩეჩილაძე',16,8.2,'2000-12-12',1)
(NULL,N'დოლიძე',16,8.2,'2000-12-12',1)


SELECT
	*
FROM Students


UPDATE Students
SET
FirstName = N'ირაკლი',
LastName = N'ბერძენიშვილი'



DELETE FROM Students





ლექცია 2


CREATE TABLE Students
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	FistName NVARCHAR(100) NOT NULL,
	LastName NVARCHAR(100) NOT NULL,
	FullName AS FistName + ' ' + LastName,
	DateOfBirth DATETIME NOT NULL,
	Age AS YEAR(GETDATE())-YEAR(DateOfBirth),
	Email VARCHAR(70) NOT NULL,
	PhoneNumber CHAR(9) NOT NULL,
	GroupId VARCHAR(20) DEFAULT('JP-TS-13') NOT NULL
)


INSERT INTO Students(FistName,LastName,DateOfBirth,Email,PhoneNumber)
VALUES
(N'ლუკა',N'შენგელია','2000-12-12','luka@gmail.com','555337681'),
(N'დავით',N'დავითიძე','2002-02-11','david@gmail.com','555337682'),
(N'გიორგი',N'ჯიბლაძე','2001-08-23','gio@gmail.com','555337683')


SELECT TOP 1
	*
FROM Students


SELECT
	*
FROM Students
ORDER BY Age


SELECT
	*
FROM Students
ORDER BY Age DESC


SELECT
	FistName,
	LastName,
	SUBSTRING(FistName,1,1) + '.' + SUBSTRING(LastName,1,1) + '.' Initials
FROM Students

SELECT
	*
FROM Students
WHERE LastName LIKE N'%ძე%'





ლექცია 3



SELECT
	*
FROM Film
WHERE Title LIKE '[B-G]%'
ORDER BY
	FilmID,
	Title


	DECLARE @currentMonth INT = MONTH(GETDATE())
DECLARE @currentDay INT = DAY(GETDATE())
SELECT
	*
FROM Film
WHERE
	MONTH(ReleaseDate) = @currentMonth AND
	DAY(ReleaseDate) = @currentDay







ლექცია 4

--Aggregate functions

--COUNT
--COUNT_BIG
--AVG
--MAX
--MIN

SELECT*FROM Actor

SELECT
	YEAR(ReleaseDate) ReleaseYear,
	COUNT(*) FilmsCount
FROM Film
GROUP BY YEAR(ReleaseDate)
ORDER BY ReleaseYear




SELECT 
	COUNT(FirstName) AllActorsName,
	COUNT(DISTINCT FirstName) UniqueNames
FROM Actor



--მოძებნეთ თითოეული რეჟისორის მიერ გადაღებული ფილმების რაოდენობა
--დაალაგეთ კლებადობის მიხედვით

--მოძებნეთ თითოეული რეჟისორის მიერ გადაღებული ფილმების რაოდენობა
--დაალაგეთ კლებადობის მიხედვით

--მოძებნეთ თითოეულ ენაზე რამდენი ფილმია გადაღებული

SELECT
	DirectorID,
	COUNT(*)
FROM Film
GROUP BY DirectorID

SELECT
	LanguageID AS [Language],
	COUNT(*) AS Films
FROM Film
GROUP BY LanguageID
ORDER BY Films DESC

--გავიგოთ თითოეულ წელს დაბადებული მსახიობების რაოდენობა

SELECT
	YEAR(DoB),
	COUNT(*)
FROM Actor
GROUP BY YEAR(DoB)


CREATE TABLE NumbersGE
(
	Number INT PRIMARY KEY,
	NameGeo NVARCHAR(30) NULL
)


CREATE TABLE NumbersEN
(
	Number INT PRIMARY KEY,
	NameEng NVARCHAR(30) NULL
)

INSERT INTO NumbersGE(Number,NameGeo)
VALUES
	(1,N'ერთი'),
	(2,N'ორი'),
	(3,N'სამი'),
	(5,N'ხუთი'),
	(6,N'ექვსი'),
	(7,N'შვიდი'),
	(9,N'ცხრა'),
	(10,N'ათი'),
	(13,N'ცამეტი'),
	(15,N'თხუთმეტი')

INSERT INTO NumbersEN(Number,NameEng)
VALUES
	(1,N'one'),
	(2,N'two'),
	(3,N'three'),
	(4,N'four'),
	(6,N'six'),
	(8,N'eight'),
	(9,N'nine'),
	(10,N'ten'),
	(12,N'thirteen'),
	(14,N'fifteen')


SELECT*FROM NumbersGE
SELECT*FROM NumbersEN

--INNER JOIN - თანაკვეთა
--LEFT OUTER JOIN - მარცხენა + თანაკვეთა
--RIGHT OUTER JOIN - მარჯვენა + თანაკვეთა
--FULL JOIN
--CROSS JOIN

SELECT
	NumbersGE.Number,
	NameGeo,
	NumbersEN.Number,
	NameEng
FROM NumbersGE
RIGHT OUTER JOIN NumbersEN ON NumbersGE.Number = NumbersEN.Number


SELECT
	Number,
	NameEng
FROM NumbersEN


SELECT [FilmID]
      ,[Title]
      ,[ReleaseDate]
      ,Director.FullName
      ,Studio.Studio
      ,[Review]
      ,Country.Country
      ,[LanguageID]
      ,[GenreID]
      ,[RunTimeMinutes]
      ,[CertificateID]
      ,[BudgetDollars]
      ,[BoxOfficeDollars]
      ,[OscarNominations]
      ,[OscarWins]
  FROM [Movies].[dbo].[Film]
  INNER JOIN Director ON  Film.DirectorID = Director.DirectorID
  INNER JOIN Studio ON  Film.StudioID = Studio.StudioID
  INNER JOIN Country ON  Film.CountryID = Country.CountryID



  ლექცია 5

  -- 1 x 1
-- 1 x M
-- M x M


-- 1 x 1
CREATE TABLE Countries
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	CountryName NVARCHAR(MAX) NOT NULL
)

INSERT INTO Countries(CountryName)
VALUES
(N'საქართველო'),
(N'აშშ'),
(N'იტალია')



CREATE TABLE Capitals
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	CapitalName NVARCHAR(MAX) NOT NULL,
	CountryId INT UNIQUE FOREIGN KEY REFERENCES Countries(Id)
)

INSERT INTO Capitals(CapitalName,CountryId)
VALUES
(N'თბილისი',1),
(N'ვაშინგტონი',2),
(N'რომი',3)
--(N'ნეაპოლი',3)


SELECT*FROM Capitals
SELECT*FROM Countries


--1 x M

CREATE TABLE Person
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	Name NVARCHAR(MAX) NOT NULL
)

INSERT INTO Person(Name)
VALUES
(N'გიორგი'),
(N'ნიკა')


CREATE TABLE BankAccount
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	AccountNumber VARCHAR(MAX) NOT NULL,
	PersonId INT FOREIGN KEY REFERENCES Person(Id)
)

INSERT INTO BankAccount(AccountNumber,PersonId)
VALUES
('12345',1),
('1234561',1),
('1234581',2)


SELECT*FROM Person
SELECT*FROM BankAccount




--M x M


CREATE TABLE Authors
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	Name NVARCHAR(MAX) NOT NULL,
)

INSERT INTO Authors (Name)
VALUES (N'თეოდორ დოსტოევსკი'),
(N'შოთა რუსთაველი'),
(N'ნიკა ჩხარტიშვილი'),
(N'გიორგი გიორგაძე')



CREATE TABLE Book  
(
	Id INT PRIMARY KEY IDENTITY NOT NULL,
	Title NVARCHAR(MAX) NOT NULL
)

INSERT INTO Book(Title)
VALUES (N'იდიოტი'),
(N'ვეფხისტყაოსანი'),
(N'ძმები კარამაზოვები'),
(N'C# საფუძვლები')


CREATE TABLE AuthorBook
(
	AuthorId INT FOREIGN KEY REFERENCES Authors(Id),
	BookId INT FOREIGN KEY REFERENCES Book(Id)
)

INSERT INTO AuthorBook (AuthorId,BookId)
VALUES
(1,1),
(1,3),
(2,2),
(3,4),
(4,4)







